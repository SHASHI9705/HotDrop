
generator client {
  provider = "prisma-client-js"
}
model PushSubscription {
  id         String   @id @default(uuid())
  partnerId  String?
  partner    Partner? @relation(fields: [partnerId], references: [id])
  userId     String?
  user       Signup?  @relation(fields: [userId], references: [id])
  endpoint   String   @unique
  keys       Json
  createdAt  DateTime @default(now())
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Signup {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  orders Order[] // relation to orders
  pushSubscriptions PushSubscription[]
  promoUpdatesEnabled Boolean @default(false)
}

model Partner {
  id String @id @default(uuid())
  shopname String @unique
  shopcategory String
  password String
  items Item[] // relation to items
  shopimage Shopimage?
  orders Order[] // relation to orders
  verification Verification? // relation to verification
  bankAccount BankAccount?
  pushSubscriptions PushSubscription[]
  feedbacks Feedback[]
}

model BankAccount {
  id            String   @id @default(uuid())
  partnerId     String   @unique
  partner       Partner  @relation(fields: [partnerId], references: [id])
  accountNumber String
  ifscCode      String
  cardHolderName String
  accountId     String   // Razorpay sub-account ID
}

model Item {
  id String @id @default(uuid())
  name String
  price Float
  image String
  available Boolean @default(true)
  partnerId String // foreign key
  partner Partner @relation(fields: [partnerId], references: [id])
}

model Shopimage {
  id String @id @default(uuid())
  url String
  partnerId String @unique
  partner Partner @relation(fields: [partnerId], references: [id])
}

model Order {
  id         String   @id @default(uuid())
  userId     String
  user       Signup   @relation(fields: [userId], references: [id])
  partnerId  String
  partner    Partner  @relation(fields: [partnerId], references: [id])
  items      String   // Comma-separated or JSON string of items
  shopName   String
  price      Float
  dateTime   DateTime
  status     String   // e.g. 'pending', 'taken', 'cancelled', etc.
  feedbacks  Feedback[]
}

model Verification {
  id            String   @id @default(uuid())
  partnerId     String   @unique
  partner       Partner  @relation(fields: [partnerId], references: [id])
  name          String
  aadhaarNumber String
  shopAddress   String
  fssaiNumber   String   // 14 digit FSSAI license number
  verified      Boolean  @default(false)
}

model Feedback {
  id        String   @id @default(uuid())
  name      String
  stars     Int
  comment   String
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  partner   Partner  @relation(fields: [partnerId], references: [id])
  partnerId String
  createdAt DateTime @default(now())
}